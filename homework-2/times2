Timer unit: 1e-06 s

Total time: 107.274 s
File: kernelopt.py
Function: run_retrieval at line 505

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   505                                           @profile
   506                                           def run_retrieval(model_name, score_fn):
   507                                               """
   508                                               Runs a retrieval method for all the queries and writes the TREC-friendly results in a file.
   509                                               
   510                                               :param model_name: the name of the model (a string)
   511                                               :param score_fn: the scoring function (a function - see below for an example) 
   512                                               """
   513         1          3.0      3.0      0.0      run_out_path = '{}.run'.format(model_name)
   514                                           
   515                                           #     if os.path.exists(run_out_path):
   516                                           #         return
   517                                           
   518         1          2.0      2.0      0.0      retrieval_start_time = time.time()
   519                                           
   520         1         20.0     20.0      0.0      print('Retrieving using', model_name)
   521                                               
   522         1         14.0     14.0      0.0      data = collections.defaultdict(list)
   523                                               # The dictionary data should have the form: query_id --> (document_score, external_doc_id)
   524         1          0.0      0.0      0.0      count = 0
   525         1          2.0      2.0      0.0      for query_id in tokenized_queries:
   526                                                       
   527         1          1.0      1.0      0.0          if count % 15 == 0:
   528         1         11.0     11.0      0.0              print('Finished {}%...'.format(count / 15 * 10))
   529         1          1.0      1.0      0.0          count += 1    
   530         1          1.0      1.0      0.0          doc_result = []
   531      3443       3321.0      1.0      0.0          for int_doc_id in document_ids:
   532      3443     104544.0     30.4      0.1              ext_doc_id, _ = index.document(int_doc_id)
   533      3443  107160828.0  31124.3     99.9              doc_score = score_fn(int_doc_id, query_id)
   534                                           #             if doc_score != 0:
   535      3442       4845.0      1.4      0.0              data[query_id].append((doc_score, ext_doc_id))
   536                                                   
   537                                               with open(run_out_path, 'w') as f_out:
   538                                                   write_run(
   539                                                       model_name=model_name,
   540                                                       data=data,
   541                                                       out_f=f_out,
   542                                                       max_objects_per_query=1000)

Total time: 59.1856 s
File: kernelopt.py
Function: positional_language_model at line 824

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   824                                           @profile
   825                                           def positional_language_model(int_document_id, query_id, kernel, kernel_integral, mu=0.1):
   826      3443      16625.0      4.8      0.0      all_scores = np.zeros(document_lengths[int_document_id])
   827     24096      28530.0      1.2      0.0      for query_term_id in set(tokenized_queries[query_id]):    
   828   5401379    3297199.0      0.6      5.6          for i in range(document_lengths[int_document_id]):
   829   5380726    3260725.0      0.6      5.5              term_score = 0
   830   5380726    3303501.0      0.6      5.6              score = 0
   831   5380726    4152000.0      0.8      7.0              if int_document_id in inverted_index_positions[query_term_id]:
   832   1064070     716209.0      0.7      1.2                  for query_term_pos in inverted_index_positions[query_term_id][int_document_id]:
   833    737818    1275883.0      1.7      2.2                      term_score += kernel[np.abs(i-query_term_pos)]
   834                                                           #NEXT LINE
   835                                                           #TODO: check this
   836    326252     331173.0      1.0      0.6                  term_score = min(term_score, 1.0)
   837                                                       else:
   838   5054473    3034270.0      0.6      5.1                  term_score = 0
   839   5380725    5356932.0      1.0      9.1              prob_query = query_term_counts[query_id][query_term_id]/len(tokenized_queries[query_id])
   840   5380725    3772732.0      0.7      6.4              prob = collection_frequencies[query_term_id]/total_terms
   841   5380725    3478229.0      0.6      5.9              doc_len = document_lengths[int_document_id] 
   842   5380725    5542640.0      1.0      9.4              norm_value = kernel_integral[i] + kernel_integral[document_lengths[int_document_id]-1-i]
   843                                                       #NEXT LINE
   844   5380725    5021689.0      0.9      8.5              prob_word = (term_score+mu*prob)/(norm_value + mu)
   845                                                       #NEXT LINE
   846   5380725   11486591.0      2.1     19.4              score = prob_query * np.log(prob_query/prob_word)
   847                                           #                 assert prob_word <= 1.0
   848   5380725    5025266.0      0.9      8.5              all_scores[i] += score
   849      3442      29402.0      8.5      0.0      all_scores *= -1    
   850      3442      53526.0     15.6      0.1      score = np.max(all_scores)
   851      3442       2436.0      0.7      0.0      return score

